function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,_toPropertyKey(descriptor.key),descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Constructor}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return"symbol"==typeof key?key:String(key)}function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}var nano={},ClassTest=function(){function ClassTest(){_classCallCheck(this,ClassTest),this.message="Testing classes!",this.output()}return _createClass(ClassTest,[{key:"output",value:function(){print.apply(void 0,[this.message])}},{key:"eachArg",value:function(){for(var i=0;i<arguments.length;i++)print("Argument "+i+": "+arguments[i])}}]),ClassTest}();nano.hello=function(){print("Hello, world! This has been called from the LiveG OS Nano API.");var classTest=new ClassTest;classTest.eachArg.apply(classTest,["a","b","c"])};